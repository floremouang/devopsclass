WHAT IS INFRASTRUCTURE AS CODE (IAC)?
**************************************
Practicing infrastructure as code means applying the same rigor of application code development to infrastructure provisioning.
All configurations should be defined in a declarative way and stored in a source control system such as AWS CodeCommit, 
the same as application code.
Infrastructure provisioning, orchestration, and deployment should also support the use of the infrastructure as code.

EXAMPLES OF IAC
==============
1 - Cloud Specific
	Cloud Formation
	Google Cloud Deployment Manager
	Azure Resource Manager
2 - Cloud Agnostic
	Terraform
	Pulumi

WHAT IS TERRAFORM?
*******************

- Terraform is an infrastructure as code tool that lets you build, change, and version
   cloud and on-prem resources safely and efficiently.

- Enables application software best practices to infrastructure


- Compatible with many clouds and services

HOW DOES TERRAFORM WORKS?
***************************
- Creates and manages resources through cloud providers Application Programming Interface (API)
- Terraform Registry have already written thousands of providers:	AWS	GCP	AZURE

TERRAFORM WORKFLOW
**********************

- Write:
	Define insfrastructure in configuration files
- Plan:
	Review the changes Terraform will make to your insfrastructure
- Apply:
	Terraform provisions your infrastructure and update the state file

WHY TERRAFORM?
***************
1. Manage any infrastructure
	You can find providers for many of the platforms and services in the Terraform Registry.
	You can also write your own.

2. Track your infrastructure
	Terraform generate a plan and prompts you for your approval before modifying your infrastructure.

3. Automate Changes
	Terraform configuration files are declarative (describe the end state of your infrastructure)
	There is no need for a step-by-step instructions to create ressources 
	because Terraform handle the underlying logic.

4. Standardize configurations
	Modules define configurable collections of infrastucture
	You can use publicly available modules from the Terraform Registry, or write your own.

5. Collaborate
	The fact that your configuration is written in a file, enable to efficiently management across teams.


HOW TO INSTALL TERRAFORM?
**************************
Use the link below and select OS and follow instructions
https://learn.hashicorp.com/tutorials/terraform/install-cli#install-terraform

INSTALLING TERRAFORM ON WINDOWS AND AUTHENTICATING TO AWS
===========================================================
1. Install choclatey
- open powershell as Administrator
- run the command:
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
- check if it is install
choco -?

2. Install terraform
choco install terraform
terraform -help
terraform -help plan

3. Install the AWS Command Line (CLI) on a Windows Computer
choco install awscli
aws -help

4. Create IAM User with administrator Access policy:  my-devops-user
user name:	my-devops-user
managed policy: 	AdministratorAccess

5. Give my-devops-user programmatic access
IAM > Users > my-devops-user > security credentials > Create access key > Download .csv file

6. Create a name profile for my-devops-user
Creating a name profile for an IAM user will allow terraform to use that user credentials 
to authenticate with our AWS environment.
- Open your Command prompt and type the command:
aws configure --profile my-devops-user

Access key ID:		your access key ID
Secret access key:		your secret access key
default region name:	your region
Default output format:	press enter

# This will create a directory .aws under the home directory.
# Verify .aws directory is created
C:\Users\louis\.aws
config
credentials

7. Create an S3 Bucket to Store the Terraform State File
When you use Terraform to create resources in AWS,
Terraform will record the informations about the resources you created in a Terraform State File.
And the next time you go to update those ressources, Terraform will use the State file to find those 
ressources and update them accordingly.
The State file is very crucial how Terraform works.
In this Bootcamp, we will create an S3 buckets to store all our state files.
Most company store their state file in an S3 buckets (Interview question)

S3 > Create Bucket
Bucket name:		yourname-devops-april2023-terraform-remote-state
AWS Region:		your region
Bucket Versioning:		Enable
Create bucket


BASIC USAGE SEQUENCE IN TERRAFORM PROJECT
*****************************************

A - CREATE PROJECT FOLDER AND AUTHENTICATE WITH AWS
===================================================
1. Create a folder in your DevOps directory: my-first-terraform-project
C:\Users\louis\DevOps\my-first-terraform-project

2. Using VSCode open my-first-terraform-project

3. Authenticate with AWS: create a file main.tf and paste the code bellow:
# Configure the AWS Provider
provider "aws" {
  region = "your region"
  profile = "my-devops-user"
}

# Stores the terraform state file in s3
terraform {
  backend "s3" {
    bucket = "yourname-devops-april2023-terraform-remote-state"
    key    = "terraform.tfstate.devops2023"
    region = "your region"
    profile = "my-devops-user"
  }
}

4. Initialize the backend
# Open the terminal into the directory of your project and type
terraform init

B - CREATING A VPC USING TERRAFORM ON AWS
========================================
HOW TO CREATE VPC?
----------------------------
1. Create a file : vpc.tf and paste the code bellow:
# terraform aws create vpc
resource "aws_vpc" "your-vpc-name" {
  cidr_block             		 = "10.0.0.0/16"
  instance_tenancy       	 = "default"
  enable_dns_hostnames   	 = true

  tags      = {
    Name    = "your-vpc-name"
  }
}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy

HOW TO CREATE INTERNET GATEWAY?
--------------------------------------------------
1. In the file vpc.tf add the code bellow:

# Create internet Gateway and attach it to vpc
resource "aws_internet_gateway" "your-internet-gateway" {
  vpc_id = aws_vpc.your-vpc-name.id

  tags = {
    Name = "your-internet-gateway"
  }
}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy

HOW TO CREATE PUBLIC SUBNET?
--------------------------------------------------
1. In the file vpc.tf add the code bellow:

# Create public subnet az1
resource "aws_subnet" "your-public-subnet-az1" {
  vpc_id = aws_vpc.your-vpc-name.id
  cidr_block = "10.0.0.0/24"
  availability_zone = "your-region-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "your-public-subnet-az1"
  }
}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy

HOW TO CREATE PUBLIC ROUTE TABLE, PUBLIC ROUTE, AND SUBNET ASSOCIATION?
---------------------------------------------------------------------------------------------------------------
1. In the file vpc.tf add the code bellow:

# Create public route table and add public route
resource "aws_route_table" "your-public-route-table" {
  vpc_id = aws_vpc.your-vpc-name.id

  # create public route
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.your-internet-gateway.id
  }

  tags = {
    Name = "your-public-route-table"
  }
}

# Subnet association to the public route table
resource "aws_route_table_association" "your-public-subnet-az1-route-table-association" {
  subnet_id = aws_subnet.your-public-subnet-az1.id
  route_table_id = aws_route_table.your-public-route-table.id
}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy

HOW TO CREATE PRIVATE SUBNET?
--------------------------------------------------
1. In the file vpc.tf add the code bellow:

# Create private subnet az1
resource "aws_subnet" "your-private-subnet-az1" {
  vpc_id = aws_vpc.your-vpc-name.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "your-region-1a"
  map_public_ip_on_launch = false

  tags = {
    Name = "your-private-subnet-az1"
  }
}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy

HOW TO CREATE NAT GATEWAY?
--------------------------------------------------
1. Create a file : nat-gateway.tf and paste the code bellow:

# Allocate elastic ip
resource "aws_eip" "you-eip-for-your-nat-gateway-az1" {
  vpc = true

  tags = {
    Name = "you-eip-for-your-nat-gateway-az1"
  }
}

# Create nat gateway 1a
resource "aws_nat_gateway" "your-nat-gateway-az1" {
  allocation_id = aws_eip.you-eip-for-your-nat-gateway-az1.id
  subnet_id = aws_subnet.techmax_public_subnet_1a.id
  
  tags = {
    Name = "your-nat-gateway-az1"
  }

  # Ensure proper ordering
  depends_on = [aws_internet_gateway.your-internet-gateway]
}

# Create your-private-route-table-az1  add your-nat-gateway-az1
resource "aws_route_table" "your-private-route-table-az1" {
  vpc_id = aws_vpc.your-vpc-name.id

  # create public route
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.your-nat-gateway-az1.id
  }

  tags = {
    Name = "your-private-route-table-az1"
  }
}

# Subnet association to the public route table
resource "aws_route_table_association" "your-private-subnet-az1-your-private-route-table-az1-association" {
  subnet_id = aws_subnet.your-private-subnet-az1.id
  route_table_id = aws_route_table.your-private-route-table-az1.id
}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy


HOW TO CREATE SECURITY GROUP?
--------------------------------------------------
1. Create a file : security-group.tf and paste the code bellow:

# Create your security group
resource "aws_security_group" "your-security-group" {
  name = "your-security-group"
  description = "enable ssh, http and https access on port"
  vpc_id = aws_vpc.your-vpc-name.id

  ingress {
    description = "http access"
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "https access"
    from_port = 443
    to_port = 443
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = -1
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "your-security-group"
  }

}

2. View the planning
terraform plan

3. Provisioning
terraform apply

4. Decommissionning
terraform destroy


HOW TO LAUNCH AMAZON LINUX 2 INSTANCE?
--------------------------------------------------
1. Create a file : ec2.tf and paste the code bellow:

# use data source to get a registered amazon linux 2 ami
data "aws_ami" "amazon-linux-2" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "owner-alias"
    values = ["amazon"]
  }

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}


# launch the ec2 instance and install website
resource "aws_instance" "your-ec2-instance" {
  ami                    = data.aws_ami.amazon-linux-2.id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.your-public-subnet-az1.id
  vpc_security_group_ids = [aws_security_group.your-security-group.id]
  key_name               = "your-key"
  user_data              = file("install_techmax.sh")

  tags = {
    Name = "your-ec2-instance"
  }
}

2. Create a script file: install_techmax.sh and paste the code bellow:

#!/bin/bash
sudo su
yum update -y
yum install -y httpd
cd /var/www/html
wget https://github.com/devopsstudygroupadmin/techmax/archive/refs/heads/main.zip
unzip main.zip
cp -r techmax-main/* /var/www/html/
rm -rf techmax-main main.zip
systemctl enable httpd 
systemctl start httpd

3. Verify on the web browser that the website is running
http://<Public-IP>:80

4. View the planning
terraform plan

5. Provisioning
terraform apply

6. Decommissionning
terraform destroy


	CONGRATULATION !!!

















