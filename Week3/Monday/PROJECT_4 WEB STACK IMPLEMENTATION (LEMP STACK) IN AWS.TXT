/**
* WEB STACK IMPLEMENTATION (LEMP STACK) IN AWS
* A LEMP stack is a bundle of four different software technologies that developers use to build websites and web applications.
* LEMP Stands For:
*
* L- Linux Operating System
* E- Nginx Server
* M- MySQL Database
* P- PHP
*
*
*
**/
---------------------------------------------------------------------
# A - CREATE THE LINUX VIRTUAL MACHINE ON AWS
---------------------------------------------------------------------
1. Signed up for an AWS account.

2. Logged in as IAM user

3. Select a region and use the default VPC in that region

4. Create a security group for the application loadbalancer: lemp-security-group
/**
* Open port 80 (HTTP) for any source on the internet (Source = 0.0.0.0/0)
* Open port 22 (SSH) for your IP address (Source = Your IP Address)
**/

5. Launched an EC2 instance: lemp-server
  Name:			lemp-server
   AMI:			ubuntu
   type:			t2.micro
   Key pair:		mobaxt_key
   Security Group:		lemp-security-group

6. Use Mobaxterm to SSH into lemp-server

-------------------------------------------------------
# B - INSTALLING THE NGINX WEB SERVER
--------------------------------------------------------
1. To start, update server’s package index. Afterwards, use apt install to get the Nginx installation going. To start the update run: 
sudo apt update -y

2. Next, install Nginx by running: 
sudo apt install nginx -y

4. To confirm that nginx was successfully installed and is running as a service in Ubuntu, run: 
systemctl status nginx

# Green indicator shows that the server was successfully install and running.

8. To test that the server can be accessed from the internet, open a browser and type the following url with the public IP of your Ubuntu instance; 
http://<lemp-server-Public-IP-Address>:80

----------------------------------
# C — INSTALLING MYSQL
----------------------------------
1. To acquire and install SQL run: 
sudo apt install mysql-server -y

2. Log into MySQL: 
sudo mysql

3. Run a security script that comes pre-installed with MySQL. This script will remove some insecure default settings and lock down access to your database system. run the follwing command: 
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'PassWord.1';

4. Exit SQL shell by typing "exit" or "\q"
 \q

5. Start interactive scripting to configure the validate password pluggin. Run: 
sudo mysql_secure_installation

6. Answer Y to all the prompts. Change the password of your root user if you want

7. Test to know if login to the console is possible. type: 
sudo mysql -p

8. Exit SQL shell by typing "exit" or "\q"
\q

-----------------------------
# D – INSTALLING PHP
-----------------------------
/**
* Why PHP?
*	PHP has to be installed to process code and generate dynamic content for the web server.
*
*Why php-fpm?
*	For a better overall performance in most PHP-based websites
*	You’ll need to install php-fpm, which stands for “PHP fastCGI process manager”,
*	and tell Nginx to pass PHP requests to this software for processing.
*
* Why php-mysql?
*	you’ll need php-mysql, a PHP module that allows PHP to communicate with MySQL-based databases.
*	Core PHP packages will automatically be installed as dependencies.
*
*  To install the 2 pacakages at once, run: 
**/

sudo apt install php-fpm php-mysql -y

--------------------------------------------------------------------
# E – CONFIGURING NGINX TO USE PHP PROCESSOR
---------------------------------------------------------------------
/**
* Now that we have PHP components installed.
* Next, we will configure Nginx to use them.
*
**/

1. Create the root web directory for your_domain as follows:
sudo mkdir /var/www/projectLEMP

2. Next, assign ownership of the directory with the $USER environment variable, which will reference your current system user: 
sudo chown -R $USER:$USER /var/www/projectLEMP

3. Then, open a new configuration file in Nginx’s sites-available directory using your preferred command-line editor. Here, we’ll use nano: 
sudo nano /etc/nginx/sites-available/projectLEMP

4. This will create a new blank file. Paste in the following bare-bones configuration:
server {
    listen 80;
    server_name projectLEMP www.projectLEMP;
    root /var/www/projectLEMP;

    index index.html index.htm index.php;

    location / {
        try_files $uri $uri/ =404;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
     }

    location ~ /\.ht {
        deny all;
    }
}

5. Activate the configuration by linking to the config file from Nginx’s sites-enabled directory, run:
sudo ln -s /etc/nginx/sites-available/projectLEMP /etc/nginx/sites-enabled/

6. Test your configuration for syntax errors by typing: 
sudo nginx -t

7. We need to disable default Nginx host that is currently configured to listen on port 80, for this run:
sudo unlink /etc/nginx/sites-enabled/default

8. Next, reload Nginx to apply the changes: 
sudo systemctl reload nginx

9. The website is now active, but the web root /var/www/projectLEMP is still empty. Create an index.html file in that location so that we can test that the new server block works as expected: 
echo 'Hello LEMP from hostname' $(curl -s http://169.254.169.254/latest/meta-data/public-hostname) 'with public IP' $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4) > /var/www/projectLEMP/index.html

------------------------------------------
# F – TESTING PHP WITH NGINX
------------------------------------------
/**
* Now that LEMP stack is completely installed and fully operational.
* We test it to validate that Nginx can correctly hand .php files off to your PHP processor.
*
*
**/
1. Open a new file called info.php within your document root in your text editor:
nano /var/www/projectLEMP/info.php

2. Type the following lines into the new file.
<?php
phpinfo();

3. Remove the created file
/**
* You can now access this page in your web browser by visiting the domain name 
* or public IP address you’ve set up in your Nginx configuration file, followed by /info.php: http://server_domain_or_IP/info.php
* Remove the created file, as it contains sensitive information about your PHP environment and your Ubuntu server
*
**/
rm /var/www/projectLEMP/info.php

------------------------------------------------------------------------------
# G – RETRIEVING DATA FROM MYSQL DATABASE WITH PHP
-------------------------------------------------------------------------------
/**
* The goal in this step is to create a test database (DB) with simple "To do list" and configure access to it, 
* so the Nginx website would be able to query data from the DB and display it.
*
* Because the native MySQL PHP library mysqlnd currently doesn’t support caching_sha2_authentication, 
* the default authentication method for MySQL 8. We’ll need to create a new user with the mysql_native_password
* authentication method in order to be able to connect to the MySQL database from PHP.
*
*  We will be creating a database named example_database and a user named example_user.
**/

1. Connect to the MySQL console using the root account: 
sudo mysql -p

2. To create a new database, run the following command from your MySQL console:
CREATE DATABASE example_database;

3. Next, create a new user and grant him full privileges on the database. Run: 
CREATE USER 'example_user'@'%' IDENTIFIED WITH mysql_native_password BY 'PassWord1@';

4. Next, give this user permission over the example_database database:
GRANT ALL ON example_database.* TO 'example_user'@'%';

# This will give the example_user user full privileges over the example_database database, while preventing this user from creating or modifying other databases on your server.
5. Exit the console: exit

6. Now test if the new user has the proper permissions by logging in to the MySQL console again, this time using the custom user credentials
mysql -u example_user -p

7. After logging in to the MySQL console, confirm that you have access to the example_database database:
SHOW DATABASES;

8. Next, we’ll create a test table named todo_list. From the MySQL console, run the following statement:
CREATE TABLE example_database.todo_list (
item_id INT AUTO_INCREMENT,
content VARCHAR(255),
PRIMARY KEY(item_id)
);

9. Insert a few rows of content in the test table. Repeat the next command a few times, using different VALUES:
INSERT INTO example_database.todo_list (content) VALUES ("CREATE THE LINUX VIRTUAL MACHINE ON AWS");
INSERT INTO example_database.todo_list (content) VALUES ("INSTALLING THE NGINX WEB SERVER");
INSERT INTO example_database.todo_list (content) VALUES ("INSTALLING MYSQL");
INSERT INTO example_database.todo_list (content) VALUES ("INSTALLING PHP");
INSERT INTO example_database.todo_list (content) VALUES ("CONFIGURING NGINX TO USE PHP PROCESSOR");
INSERT INTO example_database.todo_list (content) VALUES ("TESTING PHP WITH NGINX");
INSERT INTO example_database.todo_list (content) VALUES ("RETRIEVING DATA FROM MYSQL DATABASE WITH PHP");

10. To confirm that the data was successfully saved to your table, run:
SELECT * FROM example_database.todo_list;

11. After confirming, exit the console: exit
exit

12. Next, create a PHP script that will connect to MySQL and query for your content. Create a new PHP file in your custom web root directory using your preferred editor. We’ll use nano for that:
nano /var/www/projectLEMP/todo_list.php

13. Copy this content into your todo_list.php script:
<?php
$user = "example_user";
$password = "PassWord1@";
$database = "example_database";
$table = "todo_list";

try {
  $db = new PDO("mysql:host=localhost;dbname=$database", $user, $password);
  echo "<h2>TODO</h2><ol>";
  foreach($db->query("SELECT content FROM $table") as $row) {
    echo "<li>" . $row['content'] . "</li>";
  }
  echo "</ol>";
} catch (PDOException $e) {
    print "Error!: " . $e->getMessage() . "<br/>";
    die();
}

14. Access this page in the web browser by visiting the domain name or public IP address configured for the website, followed by /todo_list.php: 
http://<lemp-server-Public-IP-Address>/todo_list.php



			CONGRATULATIONS !!!









































