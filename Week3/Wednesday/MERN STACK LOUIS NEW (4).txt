****************************************************
* BUILD AND DEPLOY A MERN STACK APPLICATION ON AWS *
****************************************************
--------------------
STEP 0 - DEFINITION
--------------------
MERN stands for MongoDB, Express, React, Node, 
after the four key technologies that make up the stack.

MongoDB — document database
Express(.js) — Node.js web framework
React(.js) — a client-side JavaScript framework
Node(.js) — the premier JavaScript web server

The MERN architecture allows you to easily construct 
a three-tier architecture (front end, back end, database) 
entirely using JavaScript and JSON.

--------------------------------------------------------------------------------------
STEP I – BACKEND CONFIGURATION
--------------------------------------------------------------------------------------

# A - CREATE THE LINUX VIRTUAL MACHINE ON AWS, INSTALL NODDE.JS AND INITIALIZE OUR PROJECT
===========================================================================================
1. Signed up for an AWS account.

2. Logged in as IAM user

3. Select a region and use the default VPC in that region

4. Create a security group for the application loadbalancer: lemp-security-group
/**
*  Open port 3000 (HTTP) for any source on the internet (Source = 0.0.0.0/0)
*  Open port 5000 (HTTP) for any source on the internet (Source = 0.0.0.0/0)
*  Open port 22 (SSH) for your IP address (Source = Your IP Address)
**/

5. Launched an EC2 instance: lemp-server
  Name:			lemp-server
   AMI:			ubuntu
   type:			t2.micro
   Key pair:		mobaxt_key
   Security Group:		lemp-security-group

6. Use Mobaxterm to SSH into lemp-server

7. Install Node.Js on the server

sudo apt update && sudo apt upgrade 
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

8. Verify the node and npm installation with this command:
node -v
npm -v

9. Create a new directory for your To-Do project: 

mkdir Todo
cd Todo

10. Next, use the command npm init to initialise your project,
   then follow the prompt and finally answer yes to write out the package file.

npm init 

11. Install VS code

sudo apt install wget gpg
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
rm -f packages.microsoft.gpg

sudo apt install apt-transport-https -y
sudo apt update -y
sudo apt install code -y


B - INSTALL EXPRESSJS
=======================

1. To use express, install it using npm: 

npm install express

2. Next, create a file index.js and confirm that your index.js file is successfully created. 

touch index.js
ls

3. Next step is to install the dotenv module. Run this code: 
npm install dotenv

4. Then open the index.js file with this command: 
nano index.js

5. Type the code below into it and save:
   
const express = require('express');
require('dotenv').config();

const app = express();

const port = process.env.PORT || 5000;

app.use((req, res, next) => {
res.header("Access-Control-Allow-Origin", "\*");
res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.use((req, res, next) => {
res.send('Welcome to Express');
});

app.listen(port, () => {
console.log(`Server running on port ${port}`)
});

6. Test start the server to see if it works. Type: 
node index.js

7. Open a browser and access the server’s Public IP or Public DNS name followed by port 5000: 

http://<PublicIP-or-PublicDNS>:5000


C - ROUTES
==========

1. Create a folder called routes with this command: 

mkdir routes

2. Create a file api.js with the commands: 

nano routes/api.js 

3. Copy and save the code below into the file:

const express = require ('express');
const router = express.Router();

router.get('/todos', (req, res, next) => {

});

router.post('/todos', (req, res, next) => {

});

router.delete('/todos/:id', (req, res, next) => {

})

module.exports = router;


D - MODELS
===========

1. Install Mongoose with the following command: 

npm install mongoose

2. Create a new folder models, then create and open a file and name it todo.js with the following command: 

mkdir models
nano models/todo.js

3. Then paste the code below in the file:

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

//create schema for todo
const TodoSchema = new Schema({
action: {
type: String,
required: [true, 'The todo text field is required']
}
})

//create model for todo
const Todo = mongoose.model('todo', TodoSchema);

module.exports = Todo;

4. Next, we update our routes from the file api.js in ‘routes’ directory to make use of the new model.
   In routes directory, open api.js with nano api.js, delete the current code:

nano routes/api.js 

5. Paste below code into it then save and exit

const express = require ('express');
const router = express.Router();
const Todo = require('../models/todo');

router.get('/todos', (req, res, next) => {

//this will return all the data, exposing only the id and action field to the client
Todo.find({}, 'action')
.then(data => res.json(data))
.catch(next)
});

router.post('/todos', (req, res, next) => {
if(req.body.action){
Todo.create(req.body)
.then(data => res.json(data))
.catch(next)
}else {
res.json({
error: "The input field is empty"
})
}
});

router.delete('/todos/:id', (req, res, next) => {
Todo.findOneAndDelete({"_id": req.params.id})
.then(data => res.json(data))
.catch(next)
})

module.exports = router;


D - MONGODB DATABASE
====================

/**
*  A database is required where data will be stored.	
*  For this we will make use of mLab. Sign up for a shared clusters free account,
*  Follow the sign up process, select AWS as the cloud provider, and choose a region.
*  For the purposes of this project, allow access to the MongoDB database from anywhere.
*  Make sure you change the time of deleting the entry from 6 Hours to 1 Week
*  Create a MongoDB database and collection inside mLab
*  Next, in the index.js file, we specified process.env to access environment variables
*
**/
1. Sign up on https://www.mongodb.com/atlas-signup-from-mlab.

2. Create a file in the Todo directory and name it .env To do this type:

nano .env

3. Then add the connection string to access the database in it, just as below: 

DB = 'mongodb+srv://<username>:<password>@<network-address>/<dbname>?retryWrites=true&w=majority'

4. Delete existing content in the file index.js:
nano index.js

5. Next, paste the entire code below in the file:

const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const routes = require('./routes/api');
const path = require('path');
require('dotenv').config();

const app = express();

const port = process.env.PORT || 5000;

//connect to the database
mongoose.connect(process.env.DB, { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => console.log(`Database connected successfully`))
.catch(err => console.log(err));

//since mongoose promise is depreciated, we overide it with node's promise
mongoose.Promise = global.Promise;

app.use((req, res, next) => {
res.header("Access-Control-Allow-Origin", "\*");
res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.use(bodyParser.json());

app.use('/api', routes);

app.use((err, req, res, next) => {
console.log(err);
next();
});

app.listen(port, () => {
console.log(`Server running on port ${port}`)
});

6. Next, start the server using the command: 

node index.js

E - TESTING BACKEND CODE WITHOUT FRONTEND USING RESTful API
===========================================================

1. Because we do not have a frontend UI yet. 
We need ReactJS code to achieve that. 
But during development, we will need a way to test our code using RESTfulL API. 
Therefore, we will need to make use of some API development client to test our code. 
We will use Postman to test our API.

https://www.postman.com/

2. Create a POST request to the API from Postman
This request sends a new task to the To-Do list so the application could store it in the database. 
Also set header key Content-Type as application/json

http://<PublicIP-or-PublicDNS>:5000/api/todos 

3. Create a GET request to your API on
This request retrieves all existing records from the To-do application. 

http://<PublicIP-or-PublicDNS>:5000/api/todos 

-------------------------
Step 2 FRONTEND CREATION
--------------------------
/**
*  Having completed the functionality of the backend
*  it is time to create a user interface for a Web client (browser) to interact with the application via API.
*
*
*
**/

A - RUNNING A REACT APP
========================

1. Create a new folder in your Todo directory called client 

npx create-react-app client 

2. Install concurrently and nodemon:

npm install concurrently --save-dev
npm install nodemon --save-dev

3. In Todo folder open the package.json file. 
   Make changes to the script replace with the code below:
nano package.json

"scripts": {
"start": "node index.js",
"start-watch": "nodemon index.js",
"dev": "concurrently \"npm run start-watch\" \"cd client && npm start\""
},


B - CONFIGURE PROXY IN client/package.json
==========================================

/**
*  The purpose of this is to ensure access to the application directly 
*  from the browser by simply calling the server url like http://localhost:5000 
*  rather than always including the entire path like http://localhost:5000/api/todos
*
**/

1. Open the package.json file: 

nano client/package.json

2. Add the key value pair in the package.json file 

"proxy": "http://localhost:5000" 

3. Navigate to the Todo directory and run: 

npm run dev 


C - CREATING YOUR REACT COMPONENT
=================================

1. Inside your src folder create another folder called components: 

mkdir client/src/components

2. Inside ‘components’ directory create three files Input.js, ListTodo.js and Todo.js: 

touch client/src/components/Input.js 
touch client/src/components/ListTodo.js
touch client/src/components/Todo.js

3. Open Input.js file: 

nano client/src/components/Input.js

4. Paste the following:

import React, { Component } from 'react';
import axios from 'axios';

class Input extends Component {

state = {
action: ""
}

addTodo = () => {
const task = {action: this.state.action}

    if(task.action && task.action.length > 0){
      axios.post('/api/todos', task)
        .then(res => {
          if(res.data){
            this.props.getTodos();
            this.setState({action: ""})
          }
        })
        .catch(err => console.log(err))
    }else {
      console.log('input field required')
    }

}

handleChange = (e) => {
this.setState({
action: e.target.value
})
}

render() {
let { action } = this.state;
return (
<div>
<input type="text" onChange={this.handleChange} value={action} />
<button onClick={this.addTodo}>add todo</button>
</div>
)
}
}

export default Input

5. In the client folder, install Axios:
cd client
npm install axios
cd ..

6. Then open your ListTodo.js: 

nano client/src/components/ListTodo.js

7. Paste the following code into the ListTodo.js file:

import React from 'react';

const ListTodo = ({ todos, deleteTodo }) => {

return (
<ul>
{
todos &&
todos.length > 0 ?
(
todos.map(todo => {
return (
<li key={todo._id} onClick={() => deleteTodo(todo._id)}>{todo.action}</li>
)
})
)
:
(
<li>No todo(s) left</li>
)
}
</ul>
)
}

export default ListTodo


8. Then open your Todo.js: 

nano client/src/components/Todo.js

9. In in the Todo.js file paste the following code:

import React, {Component} from 'react';
import axios from 'axios';

import Input from './Input';
import ListTodo from './ListTodo';

class Todo extends Component {

state = {
todos: []
}

componentDidMount(){
this.getTodos();
}

getTodos = () => {
axios.get('/api/todos')
.then(res => {
if(res.data){
this.setState({
todos: res.data
})
}
})
.catch(err => console.log(err))
}

deleteTodo = (id) => {

    axios.delete(`/api/todos/${id}`)
      .then(res => {
        if(res.data){
          this.getTodos()
        }
      })
      .catch(err => console.log(err))

}

render() {
let { todos } = this.state;

    return(
      <div>
        <h1>My Todo(s)</h1>
        <Input getTodos={this.getTodos}/>
        <ListTodo todos={todos} deleteTodo={this.deleteTodo}/>
      </div>
    )

}
}

export default Todo;

10. Delete the logo and adjust our App.js. In the src folder run: 

# nano client/src/App.js

11. Copy and paste the code below into it

import React from 'react';

import Todo from './components/Todo';
import './App.css';

const App = () => {
return (
<div className="App">
<Todo />
</div>
);
}

export default App;

12. Next, in the src directory open the App.css using: 

# nano client/src/App.css

13. Then paste the following code into App.css:

.App {
text-align: center;
font-size: calc(10px + 2vmin);
width: 60%;
margin-left: auto;
margin-right: auto;
}

input {
height: 40px;
width: 50%;
border: none;
border-bottom: 2px #101113 solid;
background: none;
font-size: 1.5rem;
color: #787a80;
}

input:focus {
outline: none;
}

button {
width: 25%;
height: 45px;
border: none;
margin-left: 10px;
font-size: 25px;
background: #101113;
border-radius: 5px;
color: #787a80;
cursor: pointer;
}

button:focus {
outline: none;
}

ul {
list-style: none;
text-align: left;
padding: 15px;
background: #171a1f;
border-radius: 5px;
}

li {
padding: 15px;
font-size: 1.5rem;
margin-bottom: 15px;
background: #282c34;
border-radius: 5px;
overflow-wrap: break-word;
cursor: pointer;
}

@media only screen and (min-width: 300px) {
.App {
width: 80%;
}

input {
width: 100%
}

button {
width: 100%;
margin-top: 15px;
margin-left: 0;
}
}

@media only screen and (min-width: 640px) {
.App {
width: 60%;
}

input {
width: 50%;
}

button {
width: 30%;
margin-left: 10px;
margin-top: 0;
}
}

14. Next, in the src directory open the index.css: 

nano client/src/index.css

15. Copy and paste the code below:

body {
margin: 0;
padding: 0;
font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
"Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
sans-serif;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
box-sizing: border-box;
background-color: #282c34;
color: #787a80;
}

code {
font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
monospace;
}


16. In the Todo directory run: 

npm run dev

 CONGRATULATIONS !!!





























































