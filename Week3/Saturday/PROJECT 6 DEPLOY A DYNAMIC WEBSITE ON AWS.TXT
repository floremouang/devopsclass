**************************************************************
* FUNDAMENTAL SKILLS ON HOW TO HOST A DYNAMIC WEBSITE ON AWS *
**************************************************************
===PROBLEM===
- Assuming developers in your company are done writing all the codes and files of a dynamic website. 
- All the files have been stored in a GitHub repositoty and you have been given a script to download this website.
- As a DevOps engineer, you are responsible for deploying this website on AWS.
- The company requires high availability and fault tolerance

====================================
STEP 1: BUILD 3 TIER AWS NETWORK VPC
====================================
1. Create 01 VPC: ecom-web-vpc
region: 	us-east-1
VPC: 	ecom-web-vpc
CIDR:	10.0.0.0/16

2. Create Internet Gateway: ecom-web-internet-gateway
3. Attach the Internet Gateway ecom-web-internet-gateway to the VPC ecom-web-vpc
VPC: 	ecom-web-vpc
4. Create 02 public Subnets: ecom-web-public-subnet-az1 and ecom-web-public-subnet-az2
Public Subnets:	(1st Tier)
	ecom-web-public-subnet-az1
		Availability zone:	us-east-1a
		CIDR:		10.0.0.0/24
	ecom-web-public-subnet-az2
		Availability zone:	us-east-1b
		CIDR:		10.0.1.0/24
5. Create 01 Public Route Table: ecom-web-public-route-table
VPC: 	ecom-web-vpc
6. Add Public Route to the Public Route Table ecom-web-public-route-table

7. Associate the Public Subnets: ecom-web-public-subnet-az1 and ecom-web-public-subnet-az2
 with the Public Route Table ecom-web-public-route-table

8. Create the Private Subnets:
Private App Subnets: (2nd Tier)
	ecom-web-private-app-subnet-az1
		Availability zone:	us-east-1a
		CIDR:		10.0.2.0/24
	ecom-web-private-app-subnet-az2
		Availability zone:	us-east-1b
		CIDR:		10.0.3.0/24

Private Data Subnets: (3nd Tier)
	ecom-web-private-data-subnet-az1
		Availability zone:	us-east-1a
		CIDR:		10.0.4.0/24
	ecom-web-private-data-subnet-az2
		Availability zone:	us-east-1b
		CIDR:		10.0.5.0/24

===========================
STEP 2: CREATE NAT GATEWAYS
===========================
/**
* The Nat Gateway allows the instances in the private App
* subnets and private Data subnets to access the internet.
* The Private Route Table is associated with the private subnets
* and routes traffic to the internet through the nat gateway.
**/

1. Create NAT Gateway: ecom-web-nat-gateway-az1
VPC: 		ecom-web-vpc
Public Subnets:	ecom-web-public-subnet-az1
Allocate Elastic IP(Click)
	
2. Create route table: ecom-web-private-route-table-az1 
VPC: 		ecom-web-vpc
3. Add a public route to ecom-web-private-route-table-az1
4. Associate the ecom-web-private-app-subnet-az1 and ecom-web-private-data-subnet-az1
with the ecom-web-private-route-table-az1
5. Create NAT Gateway: ecom-web-nat-gateway-az2
VPC: 		ecom-web-vpc
Public Subnets:	ecom-web-public-subnet-az2

6. Create route table: ecom-web-private-route-table-az2 
VPC: 		ecom-web-vpc
7. Add a public route to ecom-web-private-route-table-az2
8. Associate the ecom-web-private-app-subnet-az2 and ecom-web-private-data-subnet-az2
with the ecom-web-private-route-table-az2

=============================
STEP 3: CREATE SECURITY GROUPS
=============================
1. Create a security group for the application loadbalancer: ecom-web-alb-security-group
/**
* Open port 80 (HTTP) for any source on the internet (Source = 0.0.0.0/0)
* Open port 443 (HTTPS) for any source on the internet (Source = 0.0.0.0/0)
**/
2. Create a security group to SSH in your resources: ecom-web-ssh-security-group
/**
* Open port 22 (SSH) for your IP address (Source = Your IP Address)
* 
**/
3. Create a security group for the Webserver: ecom-web-webserver-security-group
/**
* Open port 80 (HTTP) for any source on the internet through the application loadbalancer (Source = ecom-web-alb-security-group)
* Open port 443 (HTTPS) for any source on the internet through the application loadbalancer (Source = ecom-web-alb-security-group)
* Open port 22 (SSH) for your IP address (Source = ecom-web-ssh-security-group)
**/
4. Create Database Security group: ecom-web-database-security-group
/**
* Open port 3306 (MySQL/aurora) for the webserver security group (Source = ecom-web-webserver-security-group)
**/

=============================
STEP 4: CREATE THE RDS INSTANCE
=============================

RDS
1. Create a Subnet group
RDS > Subnet groups > Create DB subnet group
	Name:			ecom-web-db-subnet
	Description:		Fleet Card Database Subnet
	VPC:			ecom-web-vpc
	Availability Zones:		us-east-1a
				us-east-1b
	Subnets:		
				ecom-web-private-data-subnet-az1
				ecom-web-private-data-subnet-az2	

Create

2. Create the Database
RDS > Databases > Create database
	Standard create
	MySQL
	Engine Version:			MySQL 5.7.41
	Templates			Dev/Test
	DB instance identifier		ecom-web-rds-db
	Master username			yourname	
	Master password			yourpassword	
	confirm Master password		yourpassword	
	Burstable classes	
	Include previous generation classes
	ecom-web-vpc
	ecom-web-db-subnet
	ecom-web-database-security-group
	Availability Zone			us-east-1b
	Additional configuration
		Initial database name	eComDB
	Create database
- Wait until the DB is active


=======================================================================
STEP 5: IMPORT WEB FILES AND DUMMY DATA INTO AWS
=========================================================================

/**
*   We will upload our web files in AWS using the management console
*   To do that we will create S3 Buckets and upload the web files into the S3 Bucket
*   The web files are:  
*		dummy
*		FleetCart
**/
1. Create S3 Buckets to store the web files (FleetCart.zip) in: yourname-ecom-web-files

Amazon S3 > Create bucket
Bucket name: 	yourname-ecom-web-web-files
AWS Region:	us-east-1
Create

2. Upload the Web files (FleetCart.zip) into the Buckets
S3 > yourname-ecom-web-web-files > Upload
	Drag and drop the zipped folder: FleetCart.zip
	Upload
	Close

3. Create S3 Buckets to store the website dummy data (dummy.zip) in: yourname-ecom-web-dummy-data

Amazon S3 > Create bucket
Bucket name: 	yourname-ecom-web-dummy-data
AWS Region:	us-east-1
Create

4. Upload the Website dummy data (dummy.zip) into the Buckets
S3 > yourname-ecom-web-dummy-data > Upload
	Drag and drop the zipped folder: dummy.zip
	Upload
	Close

5. Create an IAM Role with S3 Policy
/**
*   This IAM Role will allow our EC2 instances to download 
*   our web files and dummy data from our S3 Buckets
**/
IAM > Roles > Create role
Trusted entity type:		AWS service
Use case:			EC2
Next
Permissions policies:	AmazonS3FullAccess
Next
Role name:		eComS3Role
Create role

========================================================
STEP 6: LAUNCH A SETUP SERVER AND SETUP ECOMMERCE WEBSITE
=========================================================
1. Launch the Setup Server: ecom-web-setup-server
   Name:		ecom-web-setup-server
   AMI:		Amazon Linux 2 AMI
   type:		t2.micro
   Key pair:	putty_key
  Network settings:	Edit
   VPC:		ecom-web-vpc
   Subnet:		ecom-web-public-subnet-az1
   Security Group:	ecom-web-ssh-security-group
		ecom-web-alb-security-group
		ecom-web-webserver-security-group
   Advanced details
   IAM instance profile:	eComS3Role
Launch instance

2. SSH into Setup Server
3. Start the Setup the server on CLI
	Use the file:	8._Deploy_eCommerce_Website-Notepad

4. Finalize the Setup on the UI
http://<Public_IP>
	1. Pre-Installation
		Continue
	2. Configuration
		Please enter your database connection details.
		Hosts:		your Endpoint 
		Port:		3306
		DB Username:	Your Master username 
		DB Password:	Your password 
		Database:	eComDB
		Please enter a username and password for the administration.
		First Name:	Your choice
		Last Name:	Your choice
		Email: 		Your choice
		Password:	Your choice
		Confirm Password:	Your choice
		Please enter your store details.
		Store Name:	Your choice
		Store Email:	Your choice
		Search Engine:	MySQL
		Install
	3. Complete
		eCom installed successfully!
		Go to Your Shop
5. Download MySQL Workbench
https://www.mysql.com/products/workbench/
Download Now
Go to Download Page >
Download
No thanks, just start my download
(double click on the file to start installation)
Custom
Next
Available Products
+ Applications
   + MySQL Workbench
      + MySQL Workbench 8.0
         MySQL Workbench 8.0.28
	=>
Next
Execute
Next
Execute
Next
Finish

6. Create dummy key pair
EC2 > Key pairs > Create key pair
Name: 			dummy-key
key pair type:		RSA
Private key file format:	.pem
Ceate key pair

7. Launch EC2 instance: Dummy Server
   Name:		Dummy Server
   AMI:		Amazon Linux 2 AMI
   type:		t2.micro
   Key pair:	dummy-key
  Network settings:	Edit
   VPC:		ecom-web-vpc
   Subnet:		ecom-web-public-subnet-az1
   Security Group:	ecom-web-ssh-security-group
Launch instance

8. Create dummy security group: dummy-security-group
    Open port 3306 source <Dummy Private IP>/32
Custom TCP	TCP	3306	Custom		<Dummy Private IP>/32
Create security group

9. Add the dummy security group to the RDS database
RDS > Databases > ecom-web-rds-db > Modify 
	Security group:	dummy-security-group
 	Continue
	Apply immediately
	Modify DB instance
10. Import the SQL into the database
MySQL Workbench > Database > Connect to Database
Connection Method:	Standard TCP/IP over SSH
Parameters
SSH Hostname:		Public IPv4 DNS of dummy-server
SSH Username:		ec2-user
SSH Key File:		C:\Users\yourname\Downloads\dummy-key.pem
MySQL Hostname:		your DB endpoint
MySQL Server Port:		3306
Username:		your Master Username
Password:		Store in Vault
				Your password
				ok
ok
Administration > Data Import/Restore
Data Import
	Import from Self-Contained File
	C:\Users\yourname\Desktop\DevOpsApril2023\PROJECT 6 DEPLOY A DYNAMIC WEBSITE ON AWS\fleetcart.sql
	Default Target Schema:
		eComDB
Start Import

11. Cleanup all extra ressources we used to import our SQL data into the database
- Terminate dummy-server
- Remove dummy-sercurity-group added to RDS instance
- Delete the dummy-security-group
- Delete the dummy key pair
	
12. SSH into setup server and run the script (you have to be on /home/ec2-user)
sudo su
sudo aws s3 sync s3://yourname-ecom-web-dummy-data /home/ec2-user
sudo unzip dummy.zip
sudo mv dummy/* /var/www/html/public
sudo mv -f dummy/.DS_Store /var/www/html/public
sudo rm -rf /var/www/html/storage/framework/cache/data/cache
sudo rm -rf dummy dummy.zip
chown apache:apache -R /var/www/html 
sudo service httpd restart

13. Create an Amazon Machine Image (AMI)
/**
*   Now that we have configure our website on the setup server
*   We will use the setup server to create a new AMI
*   Then we can use that new AMI to launch EC2 instances
*   When you create an AMI a snapshot is also created
**/
EC2 > Instances (running) > ecom-web-setup-server > Actions > Image and templates > Create image
Image name:		eCom AMI
Description:		eCom AMI
Tag image and snapshots together
Add new tag
	Name:		eCom AMI		
Create image

======================================
STEP 7: CREATE THE LOAD BALANCER SERVICE
======================================
1 - Create EC2 instances on each of the Private App Subnet
***Launch EC2 instance ecom-web-webserver-az1 in ecom-web-private-app-subnet-az1***
   Name:		ecom-web-webserver-az1
   AMI:		eCom AMI
   type:		t2.micro
   Key pair:	putty_key
   VPC:		ecom-web-vpc
   Subnet:		ecom-web-private-app-subnet-az1
   Security Group:	ecom-web-webserver-security-group
Launch instance

***Launch EC2 instance ecom-web-webserver-az2 in ecom-web-private-app-subnet-az2***
   Name:		ecom-web-webserver-az2
   AMI:		eCom AMI
   type:		t2.micro
   Key pair:	putty_key
   VPC:		ecom-web-vpc
   Subnet:		ecom-web-private-app-subnet-az2
   Security Group:	ecom-web-webserver-security-group
Launch instance

2 - Create target group ecom-web-TG
EC2 > Target groups >
	Create target group
		name:	ecom-web-TG
		VPC:	ecom-web-vpc
		Advanced health check settings:
			Success codes:		200,301,302
		Next
		ecom-web-webserver-az1
		ecom-web-webserver-az2
		Include as pending below(click)
		create target group
	refresh

3 - Create the ALB to route traffic in those EC2s instances
EC2 > Load balancers > Create load balancer > Select load balancer type
	Application Load Balancer > Create
	ecom-web-alb
	ecom-web-vpc
	us-east-1a	ecom-web-private-app-subnet-az1
	us-east-1b	ecom-web-private-app-subnet-az2
	ALB Security Group
	Listener HTTP:80
		Protocol:		HTTP
		Port:			80
		Default action:		Forward to:	ecom-web-TG
	create load balancer
	view load balancer
***wait for the State to change from Provisioning to Active***
- copy the DNS name of the load balancer
- Open a new web browser tab and paste it


4 - Terminate the Setup Server


=============================================
STEP 8: REGISTER A NEW DOMAIN NAME IN ROUTE 53
=============================================
1. Route 53 
2. Register domain
	Type you domain to check if it is available: yourdomain
3. select available domain the hit continue
4. Contact Details
	Enable Privacy Protection
5. Verify & Purchase
	terms and conditions
	complete order
6. Registered domains and verify your domain is there.

====================================
STEP 9: CREATE A RECORD SET IN ROUTE 53
====================================
1. We are using Route 53 to register our Domain name and create a record set.
Route 53 > Hosted zones > yourdomain > Create record
	Record name:		www
	Alias			toggle on
	Choose endpoint:	Alias to Application and Classic Load Balancer
	Choose Region:		yourregion
	Choose load balancer:	jupiter-alb
	Create Record
2. To access our website using the domain name
- select record
- copy record name
- open a new web browser tab and paste

=================================================================
STEP 10: REGISTER FOR A FREE SSL CERTIFICATE IN AWS CERTIFICATE MANAGER
=================================================================
1. We will register for a free SSL certificate from AWS Certificate Manager
AWS Certificate Manager > Certificates > Request certificate > Request public certificate
	Fully qualified domain name:		yourdomain
	Add another name to this certificate:	*.yourdomain
	DNS validation - recommended
	Request
View Certificate
Create records in Route 53
	yourdomain
	*.yourdomain
	Create records
- Refresh the web browser to validate the status
2. We will use the SSL certificate to encrypt all communications between
	our webserver and the web browser

==================================================================
STEP 11: CREATE AN HTTPS (SSL) LISTENER FOR AN APPLICATION LOAD BALANCER
==================================================================
1. We will use the SSL certificate to encrypt all communications between
	our webserver and the web browser

EC2 > Load Balancers > ecom-web-alb > Add listener
	Protocol:			HTTPS
	Default actions:		Forward
	Target group:		ecom-web-TG
	Default SSL certificate:	From ACM
				your domain
	Add
View listeners
2. For HTTP Listener Change default actions to redirect traffic to HTTPS
HTTP > Actions > Edit Listener
	Default actions:		Redirect
	Protocol:			HTTPS
	Port:			443
	Save Changes

3. Verify on the web browser
https://www.yourdomain

4. Launch Bastion Host
   Name:			ecom-web-bastion-host
   AMI:			Amazon Linux 2 AMI
   type:			t2.micro
   Key pair:		putty_key
   VPC:			ecom-web-vpc
   Subnet:			ecom-web-public-subnet-az1
   Security Group:		ecom-web-ssh-security-group
Launch instance

5. Add putty_key to Pageant
Pageant > Add Key > putty_key(browse and select putty_key) > close

6. SSH into an instance in the Private Subnet using Bastion Host
- SSH into Bastion Host using putty
ec2-user@<Public_IP_Bastion_host>
SSH > Auth > Allow agent forwarding > open

7. SSH into the instance in the private subnet
ssh ec2-user@<Private_IP_ecom-web-webserver-az1>

8. Update the ENV File
/**
* Update the domain name settings to allow
* Images to load up properly
*
**/
- Terminate ecom-web-webserver-az2
- SSH Into ecom-web-webserver-az1
ssh ec2-user@<Private_IP_ecom-web-webserver-az1>

sudo su -
cd /var/www/html
nano .env
	APP_URL=https://www.yourdomain

Ctrl+x y Enter
systemctl restart httpd

9. Create a New AMI (Because we updated our configuration file)
	eCom AMI Version2
- Wait untill AMI is Available

- Deregister eCom AMI
	eCom AMI > Deregister AMI
- Delete Snapshot
	eCom >  Actions > Delete snapshot

==================================================================
STEP 12: CREATE AN AUTO SCALING GROUP
==================================================================
/**
* Using Auto Scaling Group to dynamically create our EC2 Instnaces
* to make our website highly available, scalable, fault-tolerant, and elastic.
**/
***STEPS***
1. Terminate created instances: ecom-web-webserver-az1
2. Create a launch template
/**
* A launch template contain the configurations of our EC2 instance
* That the auto scaling group will use to launch new EC2 instances
* In the private APP subnet
**/
EC2 instances > Launch Templates > Create launch template
	name:		ecom-web-launch-template
	description: 	Launch template for ASG
	Provide guidance to help me set up a template that I can use with EC2 auto Scaling
	My AMIs
	Owned by me
	eCom AMI Version2
	64-bit (x86)
	t2.micro
	putty_key
	car-rental-webserver-security-group
create launch template
view launch template

3. Create auto Scaling group
EC2 > Auto Scaling Group > Create Auto Scaling group
	name:			ecom-web-asg
	Launch template:		ecom-web-launch-template
	Next
	ecom-web-vpc
	ecom-web-private-app-subnet-az1
	ecom-web-private-app-subnet-az2	
	Next
	Attach to an existing load balancer
	Choose from your load balancer target groups
	car-rental-TG
	ELB
	Enable group metrics collection within CloudWatch
	Next
	Group size
		Desired capacity:	2
		Minimum capacity:	1
		Maximum capacity:	4
	Next
	Add notification
	SNS Topic: Create Topic
	Next
	Add tags
		key:	name
		Value:	ecom-web-asg-webserver
	Next
	Create Auto Scaling group
4. verify that 02 ec2 instances are up and running
5. verify that your website is available on the internet


================
STEP 13: CLEANUP
================

1. Delete Auto Scaling group
2. Delete Launch Template
3. Delete Application load balancer
4. Delete the target group
5. Delete RDS database
	Create final snapshot
	ecom-web-final-snapshot
6. RDS Subnet group
6. Bastion host
7. Security Groups
	Database security group
	Webserver security group
	ALB security group
	SSH security group
8. Delete the NAT Gateway
9. Delete VPC
10. Delete the elastic IP
11. Delete Record set (delete the A record)





































































